#!/usr/bin/env bash

PHP_STAGED_FILES=$(git diff --name-only --cached --diff-filter=ACMR -- '*.php' | sed 's| |\\ |g')
DEPTRAC_CONFIG_FILES='./config/deptrac/*'
TOOLS_PATH='./tools'
CMD=$1
shift 1

php_staged_files() {
  echo "$PHP_STAGED_FILES"
}

install_dependencies() {
  composer install --prefer-dist --no-progress
}

migrate() {
  php bin/console \
    doctrine:migrations:migrate \
    --no-interaction \
    --env="${APP_RUNTIME_ENV}"
}

schema_drop() {
  php bin/console \
    doctrine:schema:drop \
    --force \
    --full-database \
    --no-interaction \
    --env="${APP_RUNTIME_ENV}"
}

setup() {
  install_dependencies
  schema_drop
  migrate
}

phpunit() {
  ./bin/phpunit \
    --configuration "$TOOLS_PATH"/phpunit/phpunit.xml.dist \
    --exclude-group learning \
    --colors=always \
    --testdox \
    --verbose \
    "$@"
}

coverage_badge() {

  vendor/bin/php-coverage-badger \
    .coverage/coverage-clover.xml \
    .coverage/coverage-badge.svg

  inkscape \
    --export-png=public/coverage-badge.png \
    --export-dpi=200 \
    --export-background-opacity=0 \
    --without-gui .coverage/coverage-badge.svg &>/dev/null
}

coverage() {
  export XDEBUG_MODE=coverage

  phpunit --coverage-text \
    --coverage-clover=.coverage/coverage-clover.xml \
    --coverage-html .coverage/html

  TEST_STATUS=$?

  export XDEBUG_MODE=off

  if [[ "$TEST_STATUS" -eq 0 ]]; then
    coverage_badge
  fi

  return $TEST_STATUS
}

psalm() {
  ./vendor/bin/psalm -c "$TOOLS_PATH"/psalm/psalm.xml --show-info=true --no-cache "$@"
}

coding_standard_fix() {

  #--stop-on-violation \

  ./vendor/bin/php-cs-fixer \
    fix \
    --verbose \
    --show-progress=dots \
    --cache-file="$TOOLS_PATH"/php-cs-fixer/.php-cs-fixer.cache \
    --config="$TOOLS_PATH"/php-cs-fixer/.php-cs-fixer.dist.php "$@"

  STATUS=$?

  return $STATUS
}

deptrac() {

  DEPFILE=$1
  IMG=$(basename "${DEPFILE%.yaml}".png)

  php "$TOOLS_PATH"/deptrac/deptrac.phar analyse \
    "$DEPFILE" \
    --formatter=table \
    --cache-file="$TOOLS_PATH"/deptrac/.deptrac.cache \
    --formatter=graphviz \
    --graphviz-dump-image=doc/deptrac/"$IMG"
}

create_badge() {

  #project badge "static analysis" passed psalm

  BADGE_NAME="$1"
  STATUS="$2"
  TOOL_NAME="$3"
  COLOR=$(if [ "$STATUS" == "passed" ]; then echo "green"; else echo "red"; fi)

  rm -f "public/$TOOL_NAME.svg"
  rm -f "public/$TOOL_NAME.png"

  ./vendor/bin/poser \
    "$BADGE_NAME" \
    "$STATUS" \
    "$COLOR" \
    -p "public/$TOOL_NAME.svg" \
    -s plastic \
    &>/dev/null

  inkscape --export-png="public/$TOOL_NAME.png" \
    --export-dpi=200 \
    --export-background-opacity=0 \
    --without-gui "public/$TOOL_NAME.svg" \
    &>/dev/null

  rm -f "public/$TOOL_NAME.svg"
}

while :; do
  case $CMD in
  php_staged_files)
    php_staged_files
    break
    ;;
  setup-test)
    APP_RUNTIME_ENV='test' setup
    break
    ;;
  setup-dev)
    APP_RUNTIME_ENV='dev' setup
    break
    ;;
  phpunit)
    phpunit "$@"
    exit $?
    ;;
  coverage)
    coverage
    exit $?
    ;;
  coverage-badge)
    coverage_badge
    break
    ;;
  psalm)
    psalm "$@"
    exit $?
    ;;
  security-analysis)
    psalm --taint-analysis
    exit $?
    ;;
  coding-standard-fix)
    coding_standard_fix "$@"
    exit $?
    ;;
  coding-standard-check)
    coding_standard_fix --dry-run "$@"
    exit $?
    ;;
  coding-standard-fix-all)
    coding_standard_fix ./src ./tests
    exit $?
    ;;
  coding-standard-fix-staged)
    coding_standard_fix $(git diff --name-only --cached --diff-filter=ACMR -- '*.php' | sed 's| |\\ |g')
    exit $?
    ;;
  coding-standard-check-staged)
    coding_standard_fix --dry-run $(git diff --name-only --cached --diff-filter=ACMR -- '*.php' | sed 's| |\\ |g')
    exit $?
    ;;
  coding-standard-check-all)
    coding_standard_fix --dry-run ./src ./tests
    exit $?
    ;;
  deptrac)
    deptrac "$1"
    exit $?
    ;;
  deptrac-all)
    for f in $DEPTRAC_CONFIG_FILES; do
      deptrac "$f"
    done
    exit $?
    ;;
  create-badge)
    create_badge "$@"
    break
    ;;
  shortlist)
    echo \
      php_staged_files \
      setup-test \
      setup-dev \
      phpunit \
      coverage \
      coverage-badge \
      psalm \
      security-analysis \
      coding-standard-fix \
      coding-standard-fix-all \
      coding-standard-fix-staged \
      coding-standard-check-staged \
      coding-standard-check-all \
      deptrac \
      deptrac-all \
      create-badge
    break
    ;;
  esac
done
