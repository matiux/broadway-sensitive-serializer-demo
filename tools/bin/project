#! /bin/bash

PHP_STAGED_FILES=$(git diff --name-only --cached --diff-filter=ACMR -- '*.php' | sed 's| |\\ |g')
TOOLS_PATH='./tools'
CMD=$1
shift 1

php_staged_files() {
  echo "$PHP_STAGED_FILES"
}

install_dependencies() {
  composer install --prefer-dist --no-progress
}

migrate() {
  php bin/console \
    doctrine:migrations:migrate \
    --no-interaction \
    --env="${APP_RUNTIME_ENV}"
}

schema_drop() {
  php bin/console \
    doctrine:schema:drop \
    --force \
    --full-database \
    --no-interaction \
    --env="${APP_RUNTIME_ENV}"
}

database_create() {
  php bin/console \
    doctrine:database:create \
    --no-interaction \
    --env="${APP_RUNTIME_ENV}"
}

setup() {
  install_dependencies
  database_create
  migrate
}

phpunit() {
  ./bin/phpunit \
    --configuration "$TOOLS_PATH"/phpunit/phpunit.xml.dist \
    --exclude-group learning \
    --colors=always \
    --testdox \
    --verbose \
    "$@"
}

coverage() {
  export XDEBUG_MODE=coverage

  phpunit --coverage-text \
    --coverage-clover=.coverage/coverage-clover.xml \
    --coverage-html .coverage/html

  TEST_STATUS=$?

  export XDEBUG_MODE=off

  if [[ "$TEST_STATUS" -eq 0 ]]; then
    coverage_badge
  fi

  return $TEST_STATUS
}

psalm() {
  ./vendor/bin/psalm -c "$TOOLS_PATH"/psalm/psalm.xml --show-info=true --no-cache "$@"
}

coding_standard_fix() {

  #--stop-on-violation \

  ./vendor/bin/php-cs-fixer \
    fix \
    --verbose \
    --show-progress=dots \
    --cache-file="$TOOLS_PATH"/php-cs-fixer/.php-cs-fixer.cache \
    --config="$TOOLS_PATH"/php-cs-fixer/.php-cs-fixer.dist.php "$@"

#  STATUS=$?
#
#  return $STATUS
}

while :; do
  case $CMD in
  install_dependencies)
    install_dependencies
    break
    ;;
  php_staged_files)
    php_staged_files
    break
    ;;
  setup)
    APP_RUNTIME_ENV='dev' setup
    break
    ;;
  phpunit)
    phpunit "$@"
    exit $?
    ;;
  coverage)
    coverage
    exit $?
    ;;
  psalm)
    psalm "$@"
    exit $?
    ;;
  taint-analysis)
    psalm --taint-analysis
    exit $?
    ;;
  type-coverage)
    psalm --shepherd
    exit $?
    ;;
  coding-standard-fix)
    coding_standard_fix "$@"
    exit $?
    ;;
  coding-standard-check)
    coding_standard_fix --dry-run "$@"
    exit $?
    ;;
  coding-standard-fix-all)
    coding_standard_fix ./src ./tests
    exit $?
    ;;
  coding-standard-fix-staged)
    coding_standard_fix $(git diff --name-only --cached --diff-filter=ACMR -- '*.php' | sed 's| |\\ |g')
    exit $?
    ;;
  coding-standard-check-staged)
    coding_standard_fix --dry-run $(git diff --name-only --cached --diff-filter=ACMR -- '*.php' | sed 's| |\\ |g')
    exit $?
    ;;
  coding-standard-check-all)
    coding_standard_fix --dry-run ./src ./tests
    exit $?
    ;;
  shortlist)
    echo \
      php_staged_files \
      setup \
      psalm \
      security-analysis \
      type-coverage \
      coding-standard-fix \
      coding-standard-fix-all \
      coding-standard-fix-staged \
      coding-standard-check-staged \
      coding-standard-check-all
    break
    ;;
  esac
done
